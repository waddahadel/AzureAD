<?php

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\__AzureAD__\Config\ConfigFormGUI;
use srag\DIC\AzureAD\DICTrait;
require_once "Customizing/global/plugins/Services/Authentication/AuthenticationHook/AzureAD/classes/class.ilAzureADSettings.php";
/**
 * Class ilAzureADConfigGUI
 *
 * Generated by SrPluginGenerator v1.1.0
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author Minervis Gmbg <ilias-service@minervis.com>
 */
class ilAzureADConfigGUI extends ilPluginConfigGUI
{

    use DICTrait;
    const PLUGIN_CLASS_NAME = ilAzureADPlugin::class;
    const CMD_CONFIGURE = "configure";
    const CMD_UPDATE_CONFIGURE = "updateConfigure";
    const LANG_MODULE = "config";
    const TAB_CONFIGURATION = "configuration";
    /**
     * @var \ilLogger
     */
    protected $logger;

    /**
     * @var \ilAzureADSettings
     */
    private $settings = null;
    /**
     * ilAzureADConfigGUI constructor
     */
    public function __construct()
    {
	$this->logger = ilLoggerFactory::getLogger('ilAzureADConfigGUI');
	$this->settings = ilAzureADSettings::getInstance();
    }


    /**
     * @inheritDoc
     */
    public function performCommand(/*string*/ $cmd)/*:void*/
    {
        $this->setTabs();

        $next_class = self::dic()->ctrl()->getNextClass($this);

        switch (strtolower($next_class)) {
            default:
                $cmd = self::dic()->ctrl()->getCmd();

                switch ($cmd) {
                    case self::CMD_CONFIGURE:
                    case self::CMD_UPDATE_CONFIGURE:
                        $this->{$cmd}();
                        break;

                    default:
                        break;
                }
                break;
        }
    }


    /**
     *
     */
    protected function setTabs()/*: void*/
    {
        self::dic()->tabs()->addTab(self::TAB_CONFIGURATION, self::plugin()->translate("configuration", self::LANG_MODULE), self::dic()->ctrl()
            ->getLinkTargetByClass(self::class, self::CMD_CONFIGURE));

        self::dic()->locator()->addItem(ilAzureADPlugin::PLUGIN_NAME, self::dic()->ctrl()->getLinkTarget($this, self::CMD_CONFIGURE));
    }


    /**
     * @return ConfigFormGUI
     */
    protected function getConfigForm() : ConfigFormGUI
    {
        $form = new ConfigFormGUI($this);

        return $form;
    }




    /**
     *
     */
    protected function configure()/*: void*/
    {
        self::dic()->tabs()->activateTab(self::TAB_CONFIGURATION);

        $form = $this->getConfigForm();

	 if (!$form->checkInput()) {
            ilUtil::sendFailure(
                $this->lng->txt('err_check_input')
            );
        //    $form->setValuesByPost();
        //    $this->settings($form);
            return;
        }

	//$this->logger->dump("getConfigForm_formdata:".$form->getFormFields(), \ilLogLevel::INFO);
	//$this->logger->info("getConfigForm_provider_data:".$form->getValue('provider'));
        self::output()->output($form);
    }
    /**
     * Save settings
     */
    protected function saveSettings(ConfigFormGUI $form){

        //if (!$form->checkInput()) {
          //  ilUtil::sendFailure(
         //       $this->lng->txt('err_check_input')
         //   );
         //   return;
        //}

        $this->settings->setActive((bool) $form->getInput('activation'));
        $this->settings->setProvider((string) $form->getInput('provider'));
        if (strlen($form->getInput('secret')) !== 0) {
            $this->settings->setSecret((string) $form->getInput('secret'));
        }
//        $this->settings->setLoginElementType((int) $form->getInput('le'));

//        $this->settings->setLogoutScope((int) $form->getInput('logout_scope'));
//        $this->settings->useCustomSession((bool) $form->getInput('custom_session'));
//        $this->settings->setSessionDuration((int) $form->getInput('session_duration'));
//        $this->settings->allowSync((bool) $form->getInput('sync'));
//        $this->settings->setRole((int) $form->getInput('role'));

        $this->settings->save();

    }

    /**
     *
     */
    protected function updateConfigure()/*: void*/
    {
        self::dic()->tabs()->activateTab(self::TAB_CONFIGURATION);

        $form = $this->getConfigForm();

        if (!$form->storeForm()) {
            self::output()->output($form);

            return;
        }
	$this->saveSettings($form);

        ilUtil::sendSuccess(self::plugin()->translate("configuration_saved", self::LANG_MODULE), true);

        self::dic()->ctrl()->redirect($this, self::CMD_CONFIGURE);
    }



}
